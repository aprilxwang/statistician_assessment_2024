labs(x = "", y = "Percentage (%)", color = "") +
ggtitle(paste0("Trend of progress: Level of efforts needed to achieve the each result by ", {end_yr}),
subtitle = geo_loc_text) +
scale_color_brewer(palette="Dark2")
trend_acc <- function(raw_data = raw_data, parameter = "Unmet need for family planning", geo_lvl = "unfpa_region", geoname = "none", end_yr = 2030){
# regional or global graphs
geo_loc_text <- case_when(geo_lvl == "unfpa_region" ~ "UNFPA Regions",
geo_lvl == "global" ~ "World",
geo_lvl == "country" ~ geoname)
if(geoname =="none"){
sub_arr <- raw_data %>% filter(geolevel == geo_lvl & parameter == "Unmet need for family planning" & year <= end_yr)
ggplot(sub_arr, aes(x = year, y = ARR, color = geoname)) +
geom_line(aes(y = ARR)) +
geom_line(aes(y=ARR_target),linetype="dashed") +
geom_label_repel(data=sub_arr %>% filter(year == 2020),
aes(label=paste0(geoname, ": ", acceleration, "x")),
nudge_x = 0.25, nudge_y = 0.25,
check_overlap = F) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), panel.grid.major.x = element_blank() ,panel.grid.minor = element_blank()) +
scale_x_continuous(breaks = seq(2000, end_yr, 1)) +
scale_y_continuous(breaks = seq(0, ceiling(max(sample_arr$ARR)), 5)) +
labs(x = "", y = "Percentage (%)", color = "") +
ggtitle(paste0("Trend of progress: Level of efforts needed to achieve the each result by ", {end_yr}),
subtitle = geo_loc_text) +
scale_color_brewer(palette="Dark2")
}
}
trend_acc(raw_data = sample_arr, parameter = "Unmet need for family planning", geo_lvl = "global", geoname = "none", end_yr = 2030)
trend_acc <- function(raw_data = raw_data, parameter = "Unmet need for family planning", geo_lvl = "unfpa_region", geoname = "none", end_yr = 2030){
# regional or global graphs
geo_loc_text <- case_when(geo_lvl == "unfpa_region" ~ "UNFPA Regions",
geo_lvl == "global" ~ "World",
geo_lvl == "country" ~ geoname)
if(geoname =="none"){
sub_arr <- raw_data %>% filter(geolevel == geo_lvl & parameter == "Unmet need for family planning" & year <= end_yr)
ggplot(sub_arr, aes(x = year, y = ARR, color = geoname)) +
geom_line(aes(y = ARR)) +
geom_line(aes(y=ARR_target),linetype="dashed") +
geom_label_repel(data=sub_arr %>% filter(year == 2020),
aes(label=paste0(geoname, ": ", acceleration, "x")),
nudge_x = 0.25, nudge_y = 0.25,
check_overlap = F) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), panel.grid.major.x = element_blank() ,panel.grid.minor = element_blank()) +
scale_x_continuous(breaks = seq(2000, end_yr, 1)) +
scale_y_continuous(breaks = seq(0, ceiling(max(sub_arr$ARR)), 5)) +
labs(x = "", y = "Percentage (%)", color = "") +
ggtitle(paste0("Trend of progress: Level of efforts needed to achieve the each result by ", {end_yr}),
subtitle = geo_loc_text) +
scale_color_brewer(palette="Dark2")
}
}
trend_acc(raw_data = sample_arr, parameter = "Unmet need for family planning", geo_lvl = "global", geoname = "none", end_yr = 2030)
max(sub_arr$ARR)
ceiling(max(sub_arr$ARR))
seq(0, ceiling(max(sub_arr$ARR)), 5)
trend_acc <- function(raw_data = raw_data, parameter = "Unmet need for family planning", geo_lvl = "unfpa_region", geoname = "none", end_yr = 2030){
# regional or global graphs
geo_loc_text <- case_when(geo_lvl == "unfpa_region" ~ "UNFPA Regions",
geo_lvl == "global" ~ "World",
geo_lvl == "country" ~ geoname)
if(geoname =="none"){
sub_arr <- raw_data %>% filter(geolevel == geo_lvl & parameter == "Unmet need for family planning" & year <= end_yr)
ggplot(sub_arr, aes(x = year, y = ARR, color = geoname)) +
geom_line(aes(y = ARR)) +
geom_line(aes(y=ARR_target),linetype="dashed") +
geom_label_repel(data=sub_arr %>% filter(year == 2020),
aes(label=paste0(geoname, ": ", acceleration, "x")),
nudge_x = 0.25, nudge_y = 0.25,
check_overlap = F) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), panel.grid.major.x = element_blank() ,panel.grid.minor = element_blank()) +
scale_x_continuous(breaks = seq(2000, end_yr, 1)) +
scale_y_continuous(breaks = seq(0, max(sub_arr$ARR), 5)) +
labs(x = "", y = "Percentage (%)", color = "") +
ggtitle(paste0("Trend of progress: Level of efforts needed to achieve the each result by ", {end_yr}),
subtitle = geo_loc_text) +
scale_color_brewer(palette="Dark2")
}
}
trend_acc(raw_data = sample_arr, parameter = "Unmet need for family planning", geo_lvl = "global", geoname = "none", end_yr = 2030)
seq(0, ceiling(max(sub_arr$ARR,10)), 5)
trend_acc <- function(raw_data = raw_data, parameter = "Unmet need for family planning", geo_lvl = "unfpa_region", geoname = "none", end_yr = 2030){
# regional or global graphs
geo_loc_text <- case_when(geo_lvl == "unfpa_region" ~ "UNFPA Regions",
geo_lvl == "global" ~ "World",
geo_lvl == "country" ~ geoname)
if(geoname =="none"){
sub_arr <- raw_data %>% filter(geolevel == geo_lvl & parameter == "Unmet need for family planning" & year <= end_yr)
ggplot(sub_arr, aes(x = year, y = ARR, color = geoname)) +
geom_line(aes(y = ARR)) +
geom_line(aes(y=ARR_target),linetype="dashed") +
geom_label_repel(data=sub_arr %>% filter(year == 2020),
aes(label=paste0(geoname, ": ", acceleration, "x")),
nudge_x = 0.25, nudge_y = 0.25,
check_overlap = F) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), panel.grid.major.x = element_blank() ,panel.grid.minor = element_blank()) +
scale_x_continuous(breaks = seq(2000, end_yr, 1)) +
scale_y_continuous(breaks = seq(0, ceiling(max(sub_arr$ARR,10)), 5)) +
labs(x = "", y = "Percentage (%)", color = "") +
ggtitle(paste0("Trend of progress: Level of efforts needed to achieve the each result by ", {end_yr}),
subtitle = geo_loc_text) +
scale_color_brewer(palette="Dark2")
}
}
trend_acc(raw_data = sample_arr, parameter = "Unmet need for family planning", geo_lvl = "global", geoname = "none", end_yr = 2030)
ggplot(sub_arr, aes(x = year, y = ARR, color = geoname)) +
geom_line(aes(y = ARR)) +
geom_line(aes(y=ARR_target),linetype="dashed") +
geom_label_repel(data=sub_arr %>% filter(year == 2020),
aes(label=paste0(geoname, ": ", acceleration, "x")),
nudge_x = 0.25, nudge_y = 0.25,
check_overlap = F) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), panel.grid.major.x = element_blank() ,panel.grid.minor = element_blank()) +
scale_x_continuous(breaks = seq(2000, end_yr, 1)) +
scale_y_continuous(breaks = seq(0, ceiling(max(sub_arr$ARR,10)), 5)) +
labs(x = "", y = "Percentage (%)", color = "") +
ggtitle(paste0("Trend of progress: Level of efforts needed to achieve the each result by ", {end_yr}),
subtitle = geo_loc_text) +
scale_color_brewer(palette="Dark2")
rlang::last_error()
trend_acc <- function(raw_data = raw_data, parameter = "Unmet need for family planning", geo_lvl = "unfpa_region", geo_name = "none", end_yr = 2030){
# regional or global graphs
geo_loc_text <- case_when(geo_lvl == "unfpa_region" ~ "UNFPA Regions",
geo_lvl == "global" ~ "World",
geo_lvl == "country" ~ geoname)
if(geo_name =="none"){
sub_arr <- raw_data %>% filter(geolevel == geo_lvl & parameter == "Unmet need for family planning" & year <= end_yr)
ggplot(sub_arr, aes(x = year, y = ARR, color = geoname)) +
geom_line(aes(y = ARR)) +
geom_line(aes(y=ARR_target),linetype="dashed") +
geom_label_repel(data=sub_arr %>% filter(year == 2020),
aes(label=paste0(geoname, ": ", acceleration, "x")),
nudge_x = 0.25, nudge_y = 0.25,
check_overlap = F) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), panel.grid.major.x = element_blank() ,panel.grid.minor = element_blank()) +
scale_x_continuous(breaks = seq(2000, end_yr, 1)) +
scale_y_continuous(breaks = seq(0, ceiling(max(sub_arr$ARR,10)), 5)) +
labs(x = "", y = "Percentage (%)", color = "") +
ggtitle(paste0("Trend of progress: Level of efforts needed to achieve the each result by ", {end_yr}),
subtitle = geo_loc_text) +
scale_color_brewer(palette="Dark2")
}
}
trend_acc(raw_data = sample_arr, parameter = "Unmet need for family planning", geo_lvl = "unfpa_region", geo_name = "none", end_yr = 2030)
trend_acc(raw_data = sample_arr, parameter = "Unmet need for family planning", geo_lvl = "global", geo_name = "none", end_yr = 2030)
ggplot(sub_arr, aes(x = year, y = ARR, color = geoname)) +
geom_line(aes(y = ARR)) +
geom_line(aes(y=ARR_target),linetype="dashed") +
geom_label_repel(data=sub_arr %>% filter(year == 2020),
aes(label=paste0(geoname, ": ", acceleration, "x")),
nudge_x = 0.25, nudge_y = 0.25,
check_overlap = F) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), panel.grid.major.x = element_blank() ,panel.grid.minor = element_blank()) +
scale_x_continuous(breaks = seq(2000, end_yr, 1)) +
scale_y_continuous(breaks = seq(0, ceiling(max(sub_arr$ARR,10)), 5)) +
labs(x = "", y = "Percentage (%)", color = "") +
ggtitle(paste0("Trend of progress: Level of efforts needed to achieve the each result by ", {end_yr}),
subtitle = geo_loc_text) +
scale_color_brewer(palette="Dark2")
p3<- ggplot(sub_arr, aes(x = year, y = ARR, color = geoname)) +
geom_line(aes(y = ARR)) +
geom_line(aes(y=ARR_target),linetype="dashed") +
geom_label_repel(data=sub_arr %>% filter(year == 2020),
aes(label=paste0(geoname, ": ", acceleration, "x")),
nudge_x = 0.25, nudge_y = 0.25,
check_overlap = F) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), panel.grid.major.x = element_blank() ,panel.grid.minor = element_blank()) +
scale_x_continuous(breaks = seq(2000, end_yr, 1)) +
scale_y_continuous(breaks = seq(0, ceiling(max(sub_arr$ARR,10)), 5)) +
labs(x = "", y = "Percentage (%)", color = "") +
ggtitle(paste0("Trend of progress: Level of efforts needed to achieve the each result by ", {end_yr}),
subtitle = geo_loc_text) +
scale_color_brewer(palette="Dark2")
# print in one page
p1 + p3 +p4 + p4 + plot_layout(ncol = 2, guides = "collect")
trend_acc <- function(raw_data = raw_data, parameter = "Unmet need for family planning", geo_lvl = "unfpa_region", geo_name = "none", end_yr = 2030){
# regional or global graphs
geo_loc_text <- case_when(geo_lvl == "unfpa_region" ~ "UNFPA Regions",
geo_lvl == "global" ~ "World",
geo_lvl == "country" ~ geoname)
if(geo_name =="none"){
sub_arr <- raw_data %>% filter(geolevel == geo_lvl & parameter == "Unmet need for family planning" & year <= end_yr)
ggplot(sub_arr, aes(x = year, y = ARR, color = geoname)) +
geom_line(aes(y = ARR)) +
geom_line(aes(y=ARR_target),linetype="dashed") +
geom_label_repel(data=sub_arr %>% filter(year == 2020),
aes(label=paste0(geoname, ": ", acceleration, "x")),
nudge_x = 0.25, nudge_y = 0.25,
check_overlap = F) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), panel.grid.major.x = element_blank() ,panel.grid.minor = element_blank()) +
scale_x_continuous(breaks = seq(2000, end_yr, 1)) +
scale_y_continuous(breaks = seq(0, ceiling(max(sub_arr$ARR,10)), 5)) +
labs(x = "", y = "Percentage (%)", color = "") +
ggtitle(paste0("Trend of progress: Level of efforts needed to achieve the each result by ", {end_yr}),
subtitle = geo_loc_text) +
scale_color_brewer(palette="Dark2")
}
}
trend_acc(raw_data = sample_arr, parameter = "Unmet need for family planning", geo_lvl = "global", geo_name = "none", end_yr = 2030)
rlang::last_error()
rlang::last_trace()
trend_acc <- function(raw_data = raw_data, parameter = "Unmet need for family planning", geo_lvl = "unfpa_region", geo_name = "none", end_yr = 2030){
# regional or global graphs
geo_loc_text <- case_when(geo_lvl == "unfpa_region" ~ "UNFPA Regions",
geo_lvl == "global" ~ "World",
geo_lvl == "country" ~ geoname)
if(geo_name =="none"){
sub_arr <- raw_data %>% filter(geolevel == geo_lvl & parameter == "Unmet need for family planning" & year <= end_yr)
ggplot(sub_arr, aes(x = year, y = ARR, color = geoname)) +
geom_line(aes(y = ARR)) +
geom_line(aes(y=ARR_target),linetype="dashed") +
geom_label_repel(data=sub_arr %>% filter(year == 2020),
aes(label=paste0(geoname, ": ", acceleration, "x")),
nudge_x = 0.25, nudge_y = 0.25,
check_overlap = F) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), panel.grid.major.x = element_blank() ,panel.grid.minor = element_blank()) +
scale_x_continuous(breaks = seq(2000, end_yr, 1)) +
scale_y_continuous(breaks = seq(0, ceiling(max(sub_arr$ARR)), 5)) +
labs(x = "", y = "Percentage (%)", color = "") +
ggtitle(paste0("Trend of progress: Level of efforts needed to achieve the each result by ", {end_yr}),
subtitle = geo_loc_text) +
scale_color_brewer(palette="Dark2")
}
}
trend_acc(raw_data = sample_arr, parameter = "Unmet need for family planning", geo_lvl = "global", geo_name = "none", end_yr = 2030)
trend_acc <- function(raw_data = raw_data, parameter = "Unmet need for family planning", geo_lvl = "unfpa_region", geo_name = "none", end_yr = 2030){
# regional or global graphs
geo_loc_text <- case_when(geo_lvl == "unfpa_region" ~ "UNFPA Regions",
geo_lvl == "global" ~ "World",
geo_lvl == "country" ~ geoname)
if(geo_name =="none"){
sub_arr <- raw_data %>% filter(geolevel == geo_lvl & parameter == "Unmet need for family planning" & year <= end_yr)
ggplot(sub_arr, aes(x = year, y = ARR, color = geoname)) +
geom_line(aes(y = ARR)) +
geom_line(aes(y=ARR_target),linetype="dashed") +
geom_label_repel(data=sub_arr %>% filter(year == 2020),
aes(label=paste0(geoname, ": ", acceleration, "x")),
nudge_x = 0.25, nudge_y = 0.25,
check_overlap = F) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), panel.grid.major.x = element_blank() ,panel.grid.minor = element_blank()) +
scale_x_continuous(breaks = seq(2000, end_yr, 1)) +
scale_y_continuous(breaks = seq(0, ceiling(max(sub_arr$ARR,10)), 5)) +
labs(x = "", y = "Percentage (%)", color = "") +
ggtitle(paste0("Trend of progress: Level of efforts needed to achieve the each result by ", {end_yr}),
subtitle = geo_loc_text) +
scale_color_brewer(palette="Dark2")
}
}
trend_acc(raw_data = sample_arr, parameter = "Unmet need for family planning", geo_lvl = "global", geo_name = "none", end_yr = 2030)
ggplot(sub_arr, aes(x = year, y = ARR, color = geoname)) +
geom_line(aes(y = ARR)) +
geom_line(aes(y=ARR_target),linetype="dashed") +
geom_label_repel(data=sub_arr %>% filter(year == 2020),
aes(label=paste0(geoname, ": ", acceleration, "x")),
nudge_x = 0.25, nudge_y = 0.25,
check_overlap = F) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), panel.grid.major.x = element_blank() ,panel.grid.minor = element_blank()) +
scale_x_continuous(breaks = seq(2000, end_yr, 1)) +
scale_y_continuous(breaks = seq(0, ceiling(max(sub_arr$ARR,10)), 5)) +
labs(x = "", y = "Percentage (%)", color = "") +
ggtitle(paste0("Trend of progress: Level of efforts needed to achieve the each result by ", {end_yr}),
subtitle = geo_loc_text) +
scale_color_brewer(palette="Dark2")
geo_name = "none"
ggplot(sub_arr, aes(x = year, y = ARR, color = geoname)) +
geom_line(aes(y = ARR)) +
geom_line(aes(y=ARR_target),linetype="dashed") +
geom_label_repel(data=sub_arr %>% filter(year == 2020),
aes(label=paste0(geoname, ": ", acceleration, "x")),
nudge_x = 0.25, nudge_y = 0.25,
check_overlap = F) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), panel.grid.major.x = element_blank() ,panel.grid.minor = element_blank()) +
scale_x_continuous(breaks = seq(2000, end_yr, 1)) +
scale_y_continuous(breaks = seq(0, ceiling(max(sub_arr$ARR,10)), 5)) +
labs(x = "", y = "Percentage (%)", color = "") +
ggtitle(paste0("Trend of progress: Level of efforts needed to achieve the each result by ", {end_yr}),
subtitle = geo_loc_text) +
scale_color_brewer(palette="Dark2")
trend_acc(raw_data = sample_arr, parameter = "Unmet need for family planning", geo_lvl = "global", geo_name = "none", end_yr = 2030)
ggplot(sub_arr, aes(x = year, y = ARR, color = geoname)) +
geom_line(aes(y = ARR)) +
geom_line(aes(y=ARR_target),linetype="dashed") +
geom_label_repel(data=sub_arr %>% filter(year == 2020),
aes(label=paste0(geoname, ": ", acceleration, "x")),
nudge_x = 0.25, nudge_y = 0.25,
check_overlap = F) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), panel.grid.major.x = element_blank() ,panel.grid.minor = element_blank()) +
scale_x_continuous(breaks = seq(2000, end_yr, 1)) +
scale_y_continuous(breaks = seq(0, ceiling(max(sub_arr$ARR,10)), 5)) +
labs(x = "", y = "Percentage (%)", color = "") +
ggtitle(paste0("Trend of progress: Level of efforts needed to achieve the each result by ", {end_yr}),
subtitle = geo_loc_text) +
scale_color_brewer(palette="Dark2")
trend_acc <- function(raw_data = raw_data, parameter = "Unmet need for family planning", geo_lvl = "unfpa_region", geo_name = "none", end_yr = 2030){
# regional or global graphs
geo_loc_text <- case_when(geo_lvl == "unfpa_region" ~ "UNFPA Regions",
geo_lvl == "global" ~ "World",
geo_lvl == "country" ~ geoname)
if(geo_name =="none"){
sub_arr <- raw_data %>% filter(geolevel == geo_lvl & parameter == "Unmet need for family planning" & year <= end_yr)
ggplot(sub_arr, aes(x = year, y = ARR, color = geoname)) +
geom_line(aes(y = ARR)) +
geom_line(aes(y=ARR_target),linetype="dashed") +
geom_label_repel(data=sub_arr %>% filter(year == 2020),
aes(label=paste0(geoname, ": ", acceleration, "x")),
nudge_x = 0.25, nudge_y = 0.25,
check_overlap = F) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), panel.grid.major.x = element_blank() ,panel.grid.minor = element_blank()) +
scale_x_continuous(breaks = seq(2000, end_yr, 1)) +
scale_y_continuous(breaks = seq(0, ceiling(max(sub_arr$ARR,10)), 5)) +
labs(x = "", y = "Percentage (%)", color = "") +
ggtitle(paste0("Trend of progress: Level of efforts needed to achieve the each result by ", {end_yr}),
subtitle = geo_loc_text) #+ scale_color_brewer(palette="Dark2")
}
}
trend_acc(raw_data = sample_arr, parameter = "Unmet need for family planning", geo_lvl = "global", geo_name = "none", end_yr = 2030)
ggplot(sub_arr, aes(x = year, y = ARR, color = geoname)) +
geom_line(aes(y = ARR)) +
geom_line(aes(y=ARR_target),linetype="dashed") +
geom_label_repel(data=sub_arr %>% filter(year == 2020),
aes(label=paste0(geoname, ": ", acceleration, "x")),
nudge_x = 0.25, nudge_y = 0.25,
check_overlap = F) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), panel.grid.major.x = element_blank() ,panel.grid.minor = element_blank()) +
scale_x_continuous(breaks = seq(2000, end_yr, 1)) +
scale_y_continuous(breaks = seq(0, ceiling(max(sub_arr$ARR,10)), 5)) +
labs(x = "", y = "Percentage (%)", color = "") +
ggtitle(paste0("Trend of progress: Level of efforts needed to achieve the each result by ", {end_yr}),
subtitle = geo_loc_text) +
scale_color_brewer(palette="Dark2")
install.packages('WDI')
library(WDI)
WDIsearch(string='gdp', field='name', cache=NULL)
#
WDI_data
view(WDI_data)
View(WDI_data)
library(tidyverse)
library(readr)
library(dplyr)
library(car)
library(ggplot2)
library(vars)
#
WDI_data[[1]] %>% View()
#
WDI_data[[2]] %>% View()
# test start
# read in files
population <- read_csv("population.csv")
setwd("~/Desktop/statistician_assessment_2024")
# test start
# read in files
population <- read_csv("population.csv")
# test start
# read in files
gdp <- read_csv("GDP.csv")
# test start
# read in files
wb_groups <- read_csv("WB_groups.csv")
# test start
# read in files
wb_groups <- read_csv("WB_groups.csv")
# search for indicator
WDIsearch(string='gdp', field='name', cache=NULL) %>% View()
gdp <- read_csv("GDP.csv",skip = 4)
View(gdp)
population <- read_csv("population.csv",skip = 4)
names(gdp)
# Question 1: GDP per capita = GDP/population for each country/year pair
# data transformation:
gdp %>% pivot_longer(cols = -c("Country Code","Indicator Name","Indicator Code"), names_to = 'year_cat', values_to = 'year')
# Question 1: GDP per capita = GDP/population for each country/year pair
# data transformation:
gdp %>% pivot_longer(cols = -c("Country Name", "Country Code","Indicator Name","Indicator Code"), names_to = 'year_cat', values_to = 'year')
# Question 1: GDP per capita = GDP/population for each country/year pair
# data transformation:
gdp %>% pivot_longer(cols = -c("Country Name", "Country Code","Indicator Name","Indicator Code"), names_to = 'year', values_to = 'values')
# Question 1: GDP per capita = GDP/population for each country/year pair
# data transformation:
gdp %>% pivot_longer(cols = -c("Country Name", "Country Code","Indicator Name","Indicator Code"), names_to = 'year', values_to = 'GDP')
# Question 1: GDP per capita = GDP/population for each country/year pair
# data transformation:
gdp_long <- gdp %>% pivot_longer(cols = -c("Country Name", "Country Code","Indicator Name","Indicator Code"), names_to = 'year', values_to = 'GDP') %>% drop_na()
View(gdp_long)
pop_long <- population %>% pivot_longer(cols = -c("Country Name", "Country Code","Indicator Name","Indicator Code"), names_to = 'year', values_to = 'Population') %>% drop_na()
View(pop_long)
gdp_long %>% inner_join(pop_long, by = c("Country Name", "Country Code","Indicator Name","Indicator Code")) %>% head()
# Question 1: GDP per capita = GDP/population for each country/year pair
# data transformation:
gdp_long <- gdp %>% pivot_longer(cols = -c("Country Name", "Country Code","Indicator Name","Indicator Code"), names_to = 'year', values_to = 'GDP') %>% drop_na() %>% drop(c("Indicator Name","Indicator Code"))
# Question 1: GDP per capita = GDP/population for each country/year pair
# data transformation:
gdp_long <- gdp %>% pivot_longer(cols = -c("Country Name", "Country Code","Indicator Name","Indicator Code"), names_to = 'year', values_to = 'GDP') %>% drop_na() %>% select(-c("Indicator Name","Indicator Code"))
# Question 1: GDP per capita = GDP/population for each country/year pair
# data transformation:
gdp_long <- gdp %>% pivot_longer(cols = -c("Country Name", "Country Code","Indicator Name","Indicator Code"), names_to = 'year', values_to = 'GDP') %>% drop_na() %>% subset(., select = -c("Indicator Name","Indicator Code"))
# Question 1: GDP per capita = GDP/population for each country/year pair
# data transformation:
gdp_long <- gdp %>% pivot_longer(cols = -c("Country Name", "Country Code","Indicator Name","Indicator Code"), names_to = 'year', values_to = 'GDP') %>% drop_na() %>% subset(-c("Indicator Name","Indicator Code"))
# Question 1: GDP per capita = GDP/population for each country/year pair
# data transformation:
gdp_long <- gdp %>% pivot_longer(cols = -c("Country Name", "Country Code","Indicator Name","Indicator Code"), names_to = 'year', values_to = 'GDP') %>% drop_na() %>% subset(., select = -c(`Indicator Name`,`Indicator Code`))
View(gdp_long)
pop_long <- population %>% pivot_longer(cols = -c("Country Name", "Country Code","Indicator Name","Indicator Code"), names_to = 'year', values_to = 'Population') %>% drop_na() %>% subset(., select = -c(`Indicator Name`,`Indicator Code`))
gdp_long %>% inner_join(pop_long, by = c("Country Name", "Country Code")) %>% head()
gdp_long %>% inner_join(pop_long, by = c("Country Name", "Country Code","year")) %>% head()
gdp_per_cap <- gdp_long %>% inner_join(pop_long, by = c("Country Name", "Country Code","year")) %>%
mutate(gdp_per_cap = `GDP`/`Population`)
View(gdp_per_cap)
gdp_per_cap <- gdp_long %>% inner_join(pop_long, by = c("Country Name", "Country Code","year")) %>%
mutate(`GDP per capita` = `GDP`/`Population`)
View(gdp_per_cap)
# test start
# read in files
wb_groups <- read_csv("WB_groups.csv")
# test start
# read in files
wb_groups <- read_csv("WB_groups.csv",col_select = c(1:4))
# Question 2: regional GDP with weighted average
gdp_per_cap %>% left_join(wb_groups, by = c("Country Code" = "CountryCode", "Country Name" = "CountryName"))
View(wb_groups)
View(wb_groups)
# test start
# read in files
wb_groups <- read_csv("WB_groups.csv",col_select = c(1:3))
# Question 2: regional GDP with weighted average
gdp_per_cap %>% left_join(wb_groups, by = c("Country Code" = "CountryCode"))
# search for indicator
WDIsearch(string='gdp', field='name', cache=NULL) %>% View()
# download indicator
WDI(
country = "all",
indicator = "NY.GDP.MKTP.KD",
start = 1960,
end = NULL,
extra = FALSE,
cache = NULL,
latest = NULL,
language = "en"
)
# download indicator
WDI(
country = "all",
indicator = "NY.GDP.MKTP.KD",
start = 2020,
end = NULL,
extra = FALSE,
cache = NULL,
latest = NULL,
language = "en"
)
# Question 2: regional GDP with weighted average
# Detected error in WB_groups.csv, filter for AFW and AFE regions before merging
wb_groups %>% filter("GroupCode" = c("AFW", "AFE"))
# Question 2: regional GDP with weighted average
# Detected error in WB_groups.csv, filter for AFW and AFE regions before merging
wb_groups %>% filter("GroupCode" == c("AFW", "AFE"))
# Question 2: regional GDP with weighted average
# Detected error in WB_groups.csv, filter for AFW and AFE regions before merging
wb_groups %>% filter(GroupCode %in% c("AFW", "AFE"))
# Question 2: regional GDP with weighted average
# Detected error in WB_groups.csv, filter for AFW and AFE regions before merging
regional_groupa <- wb_groups %>% filter(GroupCode %in% c("AFW", "AFE"))
# Question 2: regional GDP with weighted average
# Detected error in WB_groups.csv, filter for AFW and AFE regions before merging
regional_groups <- wb_groups %>% filter(GroupCode %in% c("AFW", "AFE"))
View(regional_groupa)
gdp_per_cap %>% full_join(regional_groups, by = c("Country Code" = "CountryCode"))
gdp_per_cap %>% inner_join(regional_groups, by = c("Country Code" = "CountryCode"))
gdp_af <- gdp_per_cap %>% inner_join(regional_groups, by = c("Country Code" = "CountryCode"))
View(gdp_af)
# Calculate regional population and regional GDP
gdp_af %>% group_by(year, GroupCode) %>% summarise(RegionalPop = sum(Population),
RegionalGDP = sum(GDP))
# Calculate regional population and regional GDP
gdp_regional <- gdp_af %>% group_by(year, GroupCode) %>%
summarise(RegionalPop = sum(Population),RegionalGDP = sum(GDP)) %>%
mutate(`Avg GDP per capita` = `RegionalGDP`/`RegionalPop`)
View(gdp_af)
write.xlsx(gdp_af, "gdp_af.xlsx")
write_csv(gdp_af, "gdp_af.xlsx")
write_csv(gdp_af, "gdp_af.csv")
# Calculate regional population and regional GDP
gdp_regional <- gdp_af %>% group_by(year, GroupCode) %>%
summarise(RegionalPop = sum(Population),RegionalGDP = sum(GDP)) %>%
mutate(`Avg GDP per capita` = `RegionalGDP`/`RegionalPop`)
View(gdp_regional)
# Visulization using ggplot
ggplot(gdp_regional, aes(x = year, y = `Avg GDP per capita`, color = GroupCode)) +
geom_line()
View(gdp_regional)
# Visulization using ggplot
ggplot(data = gdp_regional, aes(x = year, y = `Avg GDP per capita`, group = GroupCode)) +
geom_line()
# Visulization using ggplot
ggplot(data = gdp_regional, aes(x = year, y = `Avg GDP per capita`, group = GroupCode, color = GroupCode)) +
geom_line()
# Visulization using ggplot
ggplot(data = gdp_regional, aes(x = year, y = `Avg GDP per capita`, group = GroupCode, color = GroupCode)) +
geom_line() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
# Visulization using ggplot
ggplot(data = gdp_regional, aes(x = year, y = `Avg GDP per capita`, group = GroupCode, color = GroupCode)) +
geom_line() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
labs(title = "Average GDP per capita for AFW and AFE regions, 1960-2022")
# Visulization using ggplot
plot_q2 <- ggplot(data = gdp_regional, aes(x = year, y = `Avg GDP per capita`, group = GroupCode, color = GroupCode)) +
geom_line() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
labs(title = "Average GDP per capita for AFW and AFE regions, 1960-2022")
plot_q2
